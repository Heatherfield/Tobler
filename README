Tobler's First Law of Geography

  This GitHub repository contains supplementary material to accompany
  Ian Parberry, "Tobler's First Law of Geography, Self Similarity, and
  Perlin Noise: A Large Scale Analysis of Gradient Distribution in
  Southern Utah with Application to Procedural Terrain Generation",
  LARC Technical Report LARC-2014-04, Laboratory for Recreational
  Computing, University of North Texas, June 2014.

  See also http://larc.unt.edu/ian/research/tobler/.

ABSTRACT

  A statistical analysis finds that in a 160,000 square kilometer region
  of southern Utah gradients appear to be exponentially distributed at
  resolutions from 5m up to 1km. A simple modification to the Perlin noise
  generator changing the gradient distribution in each octave to an exponential
  distribution results in realistic and interesting procedurally generated
  terrain. The inverse transform sampling method is used in the amortized
  noise algorithm to achieve an exponential distribution in each octave,
  resulting in the generation of infinite non-repeating terrain with the
  same characteristics.

LICENSE

  The source code in this repository is made available under the following license.

  // Copyright Ian Parberry, (date).<br>
  //<br>
  // This file is made available under the GNU All-Permissive License.<br>
  //<br>
  // Copying and distribution of this file, with or without modification,<br>
  // are permitted in any medium without royalty provided the copyright<br>
  // notice and this notice are preserved.  This file is offered as-is,<br>
  // without any warranty.<br>

CONTENTS
  
  Here you will find five folders, each of which contains a program that will help
  you to reproduce the results of this paper. You will find full C++ source
  code that compiles under both Visual Studio 2012 and gcc. Each folder contains
  a Microsoft Visual Studio 2012 project and a Unix makefile.

  Links to Doxygen-generated documentation of the source code can be found
  at http://larc.unt.edu/ian/research/tobler/.

1. Generate with Perlin Noise

  If you wish to generate terrain using Perlin noise with an exponential gradient
  distribution from Section 3, then compile and run the program in this folder
  which will generate random terrain in a DEM file output.asc. You will also find
  a Terragen project file output.asc that can be used to render the terrain from
  output.asc. A subfolder called Terrain Images contains copies of Figures 11, 12,
  13, 14, 15, and some supplementary images.

2. Generate with Amortized Noise

  This folder contains a second version of the Generate program using amortized
  noise with the modifications from Section 4. A subfolder called Terrain Images 
  contains copies of Figures 19-22 and some supplementary images.

3. Exponential Distribution

  If you wish to verify the code for generating exponentially distributed random 
  numbers from Section 4, then compile and run the program in this folder.
  An Excel spreadsheet called exponential.xlsx contains a copy of the data
  generated by this program used to generate  Figures 17, 18.

4. Pack

  If you wish to go further and verify the gradient analysis in Section 2, then 
  begin by downloading the DEM files listed in filelist20x20.txt from 
  the Utah Automated Geographic Reference Center at http://gis.utah.gov/data/.
  You will need approximately 51GB of disk space to store these files.
  Compile and run the Pack program, which will read the DEM data and pack it 
  into a binary file {UtahDEMData.bin for faster processing. You will need an
  additional 11GB of disk space to store this file, but the 51GB of DEM files
  that you downloaded may be deleted after this step.

5. Analyze

  Continuing verification of the gradient analysis in Section 2, after running 
  the Pack program above, move the resulting packed binary data file 
  UtahDEMData.bin from the Pack folder to the Analyze folder, then compile and
  run the Analyze program. The results will be placed in output.txt.
  An Excel spreadsheet called utah20x20.xlsx contains the data from output.txt
  and the graphs from Figures 2, 8, 9, and 10.

